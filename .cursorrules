# Cursor Rules for Zappy Place Project

## Domain Boundaries (CRITICAL)

### packages/nostr-client - Nostr Domain Layer
- **OWNS**: All Nostr communication, event encoding/decoding, age-based pricing, zap request creation, event validation, canvas state management, Lightning integration
- **NEVER**: Handle UI rendering, PixiJS operations, input handling, camera/viewport management
- **EXPORTS**: Clean interfaces for client app to consume (NostrCanvas, callbacks, types)

### apps/client - Presentation Layer  
- **OWNS**: Pixel rendering (PixiJS), UI interactions, camera/viewport, input handling, visual feedback, UI state management
- **NEVER**: Import nostr-tools directly, handle event encoding/decoding, calculate pricing, manage relay connections, validate Nostr events, handle Lightning payments directly
- **USES**: Only interfaces exported by @zappy-place/nostr-client package

### Domain Boundary Rules
- Client app communicates with nostr-client package ONLY through exported interfaces
- NO direct imports of nostr-tools, pako, or other protocol libraries in client app
- ALL business logic (pricing, validation, encoding) belongs in nostr-client package
- Client app focuses purely on presentation and user interactions

## Commit Messages
Keep commit messages short and concise.

## Import Standards
- NEVER use inline imports like `const { func } = await import('./module')`
- Always place imports at the top of the file
- Use static imports for all dependencies unless doing explicit code splitting
- Group imports: external packages first, then internal modules

## Code Style
- Prefer functional approach over classes
- Only add comments over very complicated logic
- Use existing patterns and precedence within the project
- Clean up redundant code after making changes

## TypeScript
- Use proper typing throughout
- Avoid `any` type unless absolutely necessary
- Follow existing type patterns in the codebase

## Performance
- Prefer parallel tool calls over sequential when possible
- Use efficient data structures and algorithms
- Avoid unnecessary re-renders and computations

## File Organization
- Keep related functionality together
- Use clear, descriptive file names
- Maintain consistent directory structure

## Error Handling
- Always handle errors gracefully
- Provide meaningful error messages
- Use proper TypeScript error types

## Development Server
- DO NOT run the development server (`npm start`, `vite`, etc.) unless explicitly requested
- The user is likely running their own development server
- Only run build commands when necessary for testing compilation

## Best Practices
- Don't create unnecessary files
- Prefer editing existing files over creating new ones
- Follow the existing code patterns and conventions
- Use proper async/await patterns, not inline imports for lazy loading 